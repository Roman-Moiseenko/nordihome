<?php

namespace App\Livewire\Admin\User;

use App\Modules\User\Repository\UserRepository;
use Illuminate\Database\Eloquent\Builder;
use Rappasoft\LaravelLivewireTables\DataTableComponent;
use Rappasoft\LaravelLivewireTables\Views\Column;
use App\Modules\User\Entity\User;
use Rappasoft\LaravelLivewireTables\Views\Filters\DateFilter;
use Rappasoft\LaravelLivewireTables\Views\Filters\SelectFilter;
use Rappasoft\LaravelLivewireTables\Views\Filters\TextFilter;

class UserTable extends DataTableComponent
{
    //protected $model = User::class;

    public bool $sortingPillsStatus = false;

    private UserRepository $repository;

    public function boot(): void
    {
        parent::boot(); // TODO: Change the autogenerated stub
        $this->repository = new UserRepository();

    }

    public function builder(): Builder
    {
        return User::query()->with(['orders']);
    }


    public function configure(): void
    {
        $this->setPrimaryKey('id')
            ->setDefaultSort('created_at', 'desc')
            ->setTableWrapperAttributes([
                'default' => false,
                'class' => 'box p-4',])
            ->setTableAttributes([
                'default' => false,
                'class' => 'w-full text-left table table-hover',])
            ->setTheadAttributes([
                'default' => false,
                'class' => 'table-dark',])
            ->setThAttributes(function (Column $column) {
                return [
                    'default' => true,
                    'class' => 'text-gray-50',
                ];
            })
            ->setTrAttributes(function ($row, $index) {
                if ($row->status == User::STATUS_WAIT) {
                    if ($index % 2 == 0) {
                        return ['default' => false, 'class' => 'bg-red-50 cursor-pointer',];
                    } else {
                        return ['default' => false, 'class' => 'bg-red-100 cursor-pointer',];
                    }
                } else {
                    return [];
                }
            })
            ->setTdAttributes(function (Column $column, $row, $columnIndex, $rowIndex) {
                return ['default' => true];
            })
            ->setColumnSelectDisabled()
            ->setTableRowUrl(function ($row) {
                return route('admin.user.show', $row->id);
            })
            ->setPerPageAccepted([20, 50, 100])
            ->setSearchDisabled()
            ->setFiltersEnabled()
            ->setFilterLayoutPopover()
            ->setFilterPillsStatus(false);
    }

    public function columns(): array
    {
        return [
            Column::make('id', 'id')->hideIf(true),
            Column::make('phone', 'phone')->hideIf(true),
            Column::make("Status", "status")->hideIf(true),

            Column::make("Клиент", "email")
                ->format(function ($value, $row, Column $column) {
                    return '<span class="font-medium">' . $row->email . '</span><br>'.
                        '<span class="text-slate-500 text-xs mt-0.5">' . phone($row->phone) . '</span>';
                })
                ->html()
                ->sortable(),
            Column::make("Последний заказ", "id")
                ->format(function ($value, $row, Column $column) {
                    return $this->repository->getOrderData($row->id)['last'];
                })->html(),
            Column::make("Кол-во заказов", "id")
                ->format(function ($value, $row, Column $column) {
                    return $this->repository->getOrderData($row->id)['count'];
                })->html(),
            Column::make("Общая сумма", "id")
                ->format(function ($value, $row, Column $column) {
                    return $this->repository->getOrderData($row->id)['amount'];
                })->html(),

            Column::make("ФИО", "fullname")
                ->format(function ($value, $row, Column $column) {
                    return $row->fullname->getFullname();
                })
                ->sortable(),

            Column::make("Адрес", "address")
                ->format(function ($value, $row, Column $column) {
                    return $row->address->address;
                })
                ->sortable(),
        ];
    }

    public function filters(): array
    {
/*        $admins[0] = '';
        foreach (Admin::getModels() as $admin) {
            $admins[$admin->id] = $admin->fullname->getShortName();
        }
        $distributors[0] = '';
        foreach (Distributor::getModels() as $distributor) {
            $distributors[$distributor->id] = $distributor->name;
        }
*/
        return [

            TextFilter::make('Телефон')
                ->config([
                    'placeholder' => '8 (___) ___-__-__',
                    'class' => 'mask-phone'
                ])
                ->filter(function(Builder $builder, string $value) {
                    $builder->where('phone', 'like', '%'.$value.'%');
                }),
            TextFilter::make('Адрес')
                ->config([
                    'placeholder' => 'Город, улица',
                ])
                ->filter(function(Builder $builder, string $value) {
                    $builder->where('address', 'like', '%'.$value.'%');
                }),
            SelectFilter::make('Статус', 'completed')
                ->options([
                    '' => 'Все',
                    '0' => 'В ожидании',
                    '1' => 'Активированы',
                ])
                ->filter(function(Builder $builder, string $value) {
                    if ($value == '0') $builder->where('status', User::STATUS_WAIT);
                    if ($value == '1') $builder->where('status', User::STATUS_ACTIVE);

                }),

        ];
    }
}
